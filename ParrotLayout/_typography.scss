@import '../_variables';
@import '../_breaks';
@import '../_colors';
@import '../_typography';
@import '../_utils';

$header-sizes: map-get-strict(map-get-strict($fonts, 'headers'), 'sizes');

@each $tag in h1, h2, h3, h4, h5, h6 {
  #{$tag} {
    margin: 2rem 0 0 0;

    @include color(color, text, .7);

    :global(.contrast) & {
      @include color(color, text-contrast, .7);
    }

    @include font(headers, $tag, 400);
    @include baseline(headers, $tag);

    :global(.compact) & {
      $line-height: map-get-strict(map-get-strict($header-sizes, $tag), 'line-height');
      margin: 2rem 0 #{1rem - $line-height} 0;

      @include font(headers, $tag, 400, $responsive: false);
      @include baseline(headers, $tag, $responsive: false);
    }

    :global(.strong) & {
      font-weight: 700;
      @include color(color, text, .9);

      :global(.contrast) & {
        @include color(color, text-contrast, .9);
      }
    }
    :global(.strong.contrast) & {
      @include color(color, text-contrast, .9);
    }
  }
}

p, li, dt, dd, input, textarea, olela-narrative {
  display: block;
  margin: 0;

  @include color(color, text);
  @include font(text, p, 300);
  @include baseline(text, p);

  :global(.contrast) & {
    @include color(color, text-contrast);
  }

  :global(.compact) & {
    @include font(text, p, 300, $responsive: false);
    @include baseline(text, p, $responsive: false);
  }

  :global(.strong) & {
    font-weight: 500;
  }
}

blockquote {
  margin: 0;
  padding: 0 0 4rem 0;
}

blockquote p,
olela-narrative {
  font-weight: 500;
  @include color(color, text, .5);

  :global(.contrast) & {
    @include color(color, text-contrast, .5);
  }
}

blockquote {
  @include break(900) {
    position: relative;

    &::before {
      content: '“';
      @include font(text, p, 700);
      font-size: 48rem !important;

      margin: 0;
      padding: 0;
      display: block;

      @include color(color, text, .05);

      :global(.contrast) & {
        @include color(color, text-contrast, .05);
      }

      position: absolute;
      left: -29rem;
      top: calc(#{50%} - #{25rem});
    }
  }
}

button, input[type=submit], input[type=button] {
  margin: 0;

  @include color(color, text, .95);
  @include font(text, p, 700);

  :global(.contrast) & {
    @include color(color, text-contrast, .95);
  }
}

@mixin anchor-color($color-name) {
  a {
    &:link, &:visited {
      @include color(color, $color-name, .9);
    }
    &:hover, &:active {
      @include color(color, $color-name);
    }

    @each $tag in h1, h2, h3, h4, h5, h6 {
      #{$tag} &:link, #{$tag} &:visited {
        @include color(color, $color-name, .7);
        text-decoration: none;
      }
      #{$tag} &:hover, #{$tag} &:active {
        @include color(color, $color-name, .8);
        text-decoration: underline;
      }
    }
  }
}

@include anchor-color(action-purple);

:global(.contrast) {
  @include anchor-color(text-contrast);
}

ul, ol {
  list-style-type: none;

  padding-left: 0;

  :global(.compact) & {
    @include baseline(text, p, $responsive: false);

    ul, ol, li {
      padding-top: 0;
      padding-bottom: 0;
    }
  }

  ul, ol {
    padding-left: 6rem;

    @include break(900) {
      padding-left: 8rem;

      :global(.compact) & {
        padding-left: 6rem;
      }
    }
  }
}

ul, ol {
  li {
    &::before {
      display: inline-block;
      text-align: right;
      vertical-align: top;
      height: 1rem;
      width: 7rem;

      :not(ul) &, :not(ol) & {
        width: auto;

        @include break(700, 900) {
          width: 7rem;
        }
      }
      :global(.centered) & {
        &, :not(ul) &, :not(ol) & {
          width: 7rem;
        }
      }
    }
  }
}

ul {
  li {
    &::before {
      content: '⇨';
      @include font(text, bullet, 400);

      opacity: .7;
      margin-right: 1rem;
      margin-left: -8rem;

      @include break(900) {
        opacity: .6;
        margin-right: 3rem;
        margin-left: -10rem;
      }

      :global(.compact) & {
        @include font(text, bullet, 400, $responsive: false);

        @include break(900) {
          opacity: .7;
          margin-right: 1rem;
          margin-left: -8rem;
        }
      }

      :not(ul) &, :not(ol) & {
        margin-left: 0;

        @include break(700) {
          margin-left: -8rem;
        }
        @include break(900) {
          margin-left: -10rem;

          :global(.compact) & {
            margin-left: -8rem;
          }
        }
      }

      :global(.centered) & {
        &, :not(ul) &, :not(ol) & {
          margin-left: -8rem;
        }
      }
    }
  }
}

ol {
  li {
    &::before {
      @include font(headers, bullet, 400);

      opacity: .9;
      margin-right: 4rem;
      margin-left: -11rem;

      @include break(900) {
        opacity: .8;
        margin-right: 6rem;
        margin-left: -13rem;
      }

      :global(.compact) & {
        @include font(headers, bullet, 400, $responsive: false);

        @include break(900) {
          opacity: .9;
          margin-right: 4rem;
          margin-left: -11rem;
        }
      }

      :not(ul) &, :not(ol) & {
        margin-left: 0;

        @include break(700) {
          margin-left: -11rem;
        }
        @include break(900) {
          margin-left: -13rem;

          :global(.compact) & {
            margin-left: -11rem;
          }
        }
      }

      :global(.centered) & {
        &, :not(ul) &, :not(ol) & {
          margin-left: -11rem;
        }
      }
    }
  }
}

ol {
  li {
    counter-increment: top-level;

    &::before {
      content: counter(top-level) ".";
      -webkit-font-feature-settings: 'lnum', 'tnum';
              font-feature-settings: 'lnum', 'tnum';
    }

    ul {
      li {
        &::before {
          content: '';
        }
        ol {
          li {
            counter-increment: alt-level;

            &::before {
              content: counter(alt-level) ".";
            }
          }
        }
      }
    }

    ol {
      li {
        counter-increment: sub-level;

        &::before {
          content: counter(top-level) "." counter(sub-level) ".";
        }

        ul {
          li {
            &::before {
              content: '';
            }
          }
        }
        ol {
          li {
            counter-increment: sub-sub-level;

            &::before {
              content: counter(top-level) "." counter(sub-level) "." counter(sub-sub-level) ".";
            }
          }
        }
      }
    }
  }
}

hr {
  border: 0;
  background: transparent;

  @include color(color, text, .3);

  :global(.contrast) & {
    @include color(color, text-contrast, .3);
  }

  &::after {
    content: '~ ~ ~';
    display: block;
    text-align: center;


    @include font(text, p, 700);
    @include baseline(text, p);
  }

  padding: 7rem 0;

  @include break(900) {
    padding: 9rem 0;
  }
}

h2.categoryTitle {
  margin-bottom: -6rem;

  @include break(700, 900) {
    margin-bottom: -8rem;
  }
}

