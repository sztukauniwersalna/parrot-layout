@import './_variables';
@import './_breaks';
@import './_colors';
@import './_typography';

$bgBase64: 'data:image/png;base64,'
  + 'iVBORw0KGgoAAAANSUhEUgAAADgAAAA4CAYAAACohjseAAAABmJLR0QA/wD/AP+gvaeTAAAACXBI'
  + 'WXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4QcZCzkbBkkNNQAAAHFJREFUaN7t1bENACAIBEBwJPef'
  + 'wZnsYQLIfWesPnlyGT23vN/k/xPLo+D05Labq/8mquCAG+SgiSrIQQ6aKAc5aKIKcpCDJspBDpqo'
  + 'ghzkoIlykIMmqiAHOWiiHOSgiSrIQQ66QQ5y0EQV5CAH3eDefJAaXMEw5G3+AAAAAElFTkSuQmCC';

html {
  height: 100%;
  overflow-y: scroll;
}

body {
  @include color(background-color, background-page);
  background-image: url(#{$bgBase64});

  background-repeat: repeat;
  background-position: top left;

  margin: 0;
  height: 100%;
}

%full-width {
  box-sizing: border-box;
  width: 100%;
  padding-left: 2rem;
  padding-right: 2rem;
  margin: 0;

  @each $point in map-keys($breaks) {
    @include break($point) {
      width: map-get-strict(map-get-strict($breaks, $point), 'width');
      margin: 0 auto;
      padding-left: 0;
      padding-right: 0;
    }
  }
}

:global(#root),
#all {
  height: 100%;
  min-height: 100%;
  overflow: visible;
}

.header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;

  @include color(background-color, background-post);

  box-shadow: 0 0 3px rgba(black, .4);

  header {
    @extend %full-width;
  }
}

.jumbotron {
  @include color(background-color, 'background-pink');

  > div {
    @extend %full-width;

    padding: 1rem 0;
  }
}

.main {
  box-sizing: border-box;

  padding-top: 14rem;
  padding-bottom: 10rem;
  min-height: calc(#{100%} - #{152rem});

  @include break(500) {
    min-height: calc(#{100%} - #{105rem});
  }
  @include break(700) {
    padding-top: 18rem;
    min-height: calc(#{100%} - #{116rem});
  }
  @include break(900) {
    padding-top: 18rem;
    min-height: calc(#{100%} - #{96rem});
  }

  @include color(background-color, 'background-post');

  main {
    @extend %full-width;

    padding-top: 6rem;

    @include break(900) {
      padding-top: 7rem;
    }
  }
}

.footer {
  @include color(background-color, background-contrast);

  footer {
    @extend %full-width;
  }
}

.bottom {
  @include color(background-color, 'dark', .2);

  .logo {
    display: flex;
    justify-content: center;

    @extend %full-width;

    padding-top: 12rem;
    padding-bottom: 9rem;
    svg {
      margin-left: 2rem;
      height: 10rem;
    }

    @include break(500, 700, 900) {
      justify-content: flex-end;
      padding: 10rem 0 8rem 0;
    }

    @include break(700) {
      svg {
        height: 14rem;
      }
    }

    @include break(700, 900) {
      svg {
        height: 17rem;
      }
    }
  }
}

.sideMenu {
  position: fixed;
  top: 0;
  left: 0;

  background-color: transparent;
  transition: background-color 300ms ease-out;

  &.visible {
    @include color(background-color, 'background-overlay', 0.6);
  }
  &.closed {
    left: -100%;
  }

  height: 100%;
  width: 100%;

  display: flex;

  @include break(700, 900) {
    display: none;
  }
}

@each $tag in h1, h2, h3, h4, h5, h6 {
  #{$tag} {
    margin: 2rem 0 0 0;

    @include color(color, text, .7);
    @include font(headers, $tag, 400);
    @include baseline(headers, $tag);

    :global(.contrast) & {
      @include color(color, text-contrast, .7);
    }
  }
}

blockquote {
  margin: 0;
  padding: 0 0 4rem 0;

  > p {
    font-weight: 500;
    @include color(color, text, .5);

    :global(.contrast) & {
      @include color(color, text-contrast, .5);
    }
  }

  @include break(900) {
    position: relative;

    &::before {
      content: 'â€œ';
      @include font(text, p, 700);
      font-size: 48rem !important;

      margin: 0;
      padding: 0;
      display: block;

      @include color(color, text, .05);

      :global(.contrast) & {
        @include color(color, text-contrast, .05);
      }

      position: absolute;
      left: -29rem;
      top: calc(#{50%} - #{25rem});
    }
  }
}

p, li, dt, dd, input, textarea {
  margin: 0;

  @include color(color, text);
  @include font(text, p, 300);
  @include baseline(text, p);

  :global(.contrast) & {
    @include color(color, text-contrast);
  }
}

button, input[type=submit], input[type=button] {
  margin: 0;

  @include color(color, text, .95);
  @include font(text, p, 700);

  :global(.contrast) & {
    @include color(color, text-contrast, .95);
  }
}

@mixin anchor-color($color-name) {
  a {
    &:link, &:visited {
      @include color(color, $color-name, .9);
    }
    &:hover, &:active {
      @include color(color, $color-name);
    }

    @each $tag in h1, h2, h3, h4, h5, h6 {
      #{$tag} &:link, #{$tag} &:visited {
        @include color(color, $color-name, .7);
        text-decoration: none;
      }
      #{$tag} &:hover, #{$tag} &:active {
        @include color(color, $color-name, .8);
        text-decoration: underline;
      }
    }
  }
}

@include anchor-color(action-purple);

:global(.contrast) {
  @include anchor-color(text-contrast);
}

